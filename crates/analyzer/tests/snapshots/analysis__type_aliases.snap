---
source: crates/analyzer/tests/analysis.rs
expression: "build_snapshot(&db, module)"

---
note: 
  ┌─ type_aliases.fe:1:1
  │
1 │ type Posts = Map<PostId, PostBody>
  │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Map<u256, String<32>>

note: 
  ┌─ type_aliases.fe:2:1
  │
2 │ type Scoreboard = Map<PostId, Score>
  │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Map<u256, u64>

note: 
  ┌─ type_aliases.fe:3:1
  │
3 │ type AuthorPosts = Map<Author, PostId>
  │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Map<address, u256>

note: 
  ┌─ type_aliases.fe:5:1
  │
5 │ type Author = address
  │ ^^^^^^^^^^^^^^^^^^^^^ address

note: 
  ┌─ type_aliases.fe:6:1
  │
6 │ type Score = u64
  │ ^^^^^^^^^^^^^^^^ u64

note: 
  ┌─ type_aliases.fe:7:1
  │
7 │ type PostId = u256
  │ ^^^^^^^^^^^^^^^^^^ u256

note: 
  ┌─ type_aliases.fe:8:1
  │
8 │ type PostBody = String<32>
  │ ^^^^^^^^^^^^^^^^^^^^^^^^^^ String<32>

note: 
   ┌─ type_aliases.fe:11:5
   │
11 │     posts: Posts
   │     ^^^^^^^^^^^^ Map<u256, String<32>>
12 │     authors: AuthorPosts
   │     ^^^^^^^^^^^^^^^^^^^^ Map<address, u256>
13 │     scoreboard: Scoreboard
   │     ^^^^^^^^^^^^^^^^^^^^^^ Map<u256, u64>

note: 
   ┌─ type_aliases.fe:15:5
   │  
15 │ ╭     pub fn post(self, body: PostBody):
16 │ │         # id: PostId = keccak256(body.abi_encode())
17 │ │         let id: PostId = 0
18 │ │         self.posts[id] = body
19 │ │         self.authors[msg.sender]
20 │ │         self.scoreboard[id] = 0
   │ ╰───────────────────────────────^ attributes hash: 6408769268982658350
   │  
   = FunctionSignature {
         self_decl: Some(
             Mutable,
         ),
         params: [
             FunctionParam {
                 name: "body",
                 typ: Ok(
                     String(
                         FeString {
                             max_size: 32,
                         },
                     ),
                 ),
             },
         ],
         return_type: Ok(
             Base(
                 Unit,
             ),
         ),
     }

note: 
   ┌─ type_aliases.fe:17:17
   │
17 │         let id: PostId = 0
   │                 ^^^^^^ u256

note: 
   ┌─ type_aliases.fe:17:26
   │
17 │         let id: PostId = 0
   │                          ^ u256: Value
18 │         self.posts[id] = body
   │         ^^^^ Forum: Value

note: 
   ┌─ type_aliases.fe:18:9
   │
18 │         self.posts[id] = body
   │         ^^^^^^^^^^ ^^ u256: Value
   │         │           
   │         Map<u256, String<32>>: Storage { nonce: Some(0) }

note: 
   ┌─ type_aliases.fe:18:9
   │
18 │         self.posts[id] = body
   │         ^^^^^^^^^^^^^^   ^^^^ String<32>: Memory
   │         │                 
   │         String<32>: Storage { nonce: None }
19 │         self.authors[msg.sender]
   │         ^^^^ Forum: Value

note: 
   ┌─ type_aliases.fe:19:9
   │
19 │         self.authors[msg.sender]
   │         ^^^^^^^^^^^^ ^^^^^^^^^^ address: Value
   │         │             
   │         Map<address, u256>: Storage { nonce: Some(1) }

note: 
   ┌─ type_aliases.fe:19:9
   │
19 │         self.authors[msg.sender]
   │         ^^^^^^^^^^^^^^^^^^^^^^^^ u256: Storage { nonce: None }
20 │         self.scoreboard[id] = 0
   │         ^^^^ Forum: Value

note: 
   ┌─ type_aliases.fe:20:9
   │
20 │         self.scoreboard[id] = 0
   │         ^^^^^^^^^^^^^^^ ^^ u256: Value
   │         │                
   │         Map<u256, u64>: Storage { nonce: Some(2) }

note: 
   ┌─ type_aliases.fe:20:9
   │
20 │         self.scoreboard[id] = 0
   │         ^^^^^^^^^^^^^^^^^^^   ^ u64: Value
   │         │                      
   │         u64: Storage { nonce: None }

note: 
   ┌─ type_aliases.fe:22:5
   │  
22 │ ╭     pub fn upvote(self, id: PostId) -> Score:
23 │ │         let score: Score = self.scoreboard[id] + 1
24 │ │         self.scoreboard[id] = score
25 │ │         return score
   │ ╰────────────────────^ attributes hash: 1071444898341558853
   │  
   = FunctionSignature {
         self_decl: Some(
             Mutable,
         ),
         params: [
             FunctionParam {
                 name: "id",
                 typ: Ok(
                     Base(
                         Numeric(
                             U256,
                         ),
                     ),
                 ),
             },
         ],
         return_type: Ok(
             Base(
                 Numeric(
                     U64,
                 ),
             ),
         ),
     }

note: 
   ┌─ type_aliases.fe:23:20
   │
23 │         let score: Score = self.scoreboard[id] + 1
   │                    ^^^^^ u64

note: 
   ┌─ type_aliases.fe:23:28
   │
23 │         let score: Score = self.scoreboard[id] + 1
   │                            ^^^^ Forum: Value

note: 
   ┌─ type_aliases.fe:23:28
   │
23 │         let score: Score = self.scoreboard[id] + 1
   │                            ^^^^^^^^^^^^^^^ ^^ u256: Value
   │                            │                
   │                            Map<u256, u64>: Storage { nonce: Some(2) }

note: 
   ┌─ type_aliases.fe:23:28
   │
23 │         let score: Score = self.scoreboard[id] + 1
   │                            ^^^^^^^^^^^^^^^^^^^   ^ u64: Value
   │                            │                      
   │                            u64: Storage { nonce: None } => Value

note: 
   ┌─ type_aliases.fe:23:28
   │
23 │         let score: Score = self.scoreboard[id] + 1
   │                            ^^^^^^^^^^^^^^^^^^^^^^^ u64: Value
24 │         self.scoreboard[id] = score
   │         ^^^^ Forum: Value

note: 
   ┌─ type_aliases.fe:24:9
   │
24 │         self.scoreboard[id] = score
   │         ^^^^^^^^^^^^^^^ ^^ u256: Value
   │         │                
   │         Map<u256, u64>: Storage { nonce: Some(2) }

note: 
   ┌─ type_aliases.fe:24:9
   │
24 │         self.scoreboard[id] = score
   │         ^^^^^^^^^^^^^^^^^^^   ^^^^^ u64: Value
   │         │                      
   │         u64: Storage { nonce: None }
25 │         return score
   │                ^^^^^ u64: Value

note: 
   ┌─ type_aliases.fe:27:5
   │  
27 │ ╭     pub fn get_post(self, id: PostId) -> PostBody:
28 │ │         return self.posts[id].to_mem()
   │ ╰──────────────────────────────────────^ attributes hash: 39724703738812134
   │  
   = FunctionSignature {
         self_decl: Some(
             Mutable,
         ),
         params: [
             FunctionParam {
                 name: "id",
                 typ: Ok(
                     Base(
                         Numeric(
                             U256,
                         ),
                     ),
                 ),
             },
         ],
         return_type: Ok(
             String(
                 FeString {
                     max_size: 32,
                 },
             ),
         ),
     }

note: 
   ┌─ type_aliases.fe:28:16
   │
28 │         return self.posts[id].to_mem()
   │                ^^^^ Forum: Value

note: 
   ┌─ type_aliases.fe:28:16
   │
28 │         return self.posts[id].to_mem()
   │                ^^^^^^^^^^ ^^ u256: Value
   │                │           
   │                Map<u256, String<32>>: Storage { nonce: Some(0) }

note: 
   ┌─ type_aliases.fe:28:16
   │
28 │         return self.posts[id].to_mem()
   │                ^^^^^^^^^^^^^^ String<32>: Storage { nonce: None }

note: 
   ┌─ type_aliases.fe:28:16
   │
28 │         return self.posts[id].to_mem()
   │                ^^^^^^^^^^^^^^^^^^^^^^^ String<32>: Storage { nonce: None } => Memory


