---
source: crates/analyzer/tests/analysis.rs
expression: "build_snapshot(&files, module_id, &db)"

---
note: 
  ┌─ features/external_contract.fe:3:9
  │
3 │         my_num: u256
  │         ^^^^^^^^^^^^ u256
4 │         my_addrs: Array<address, 5>
  │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ Array<address, 5>
5 │         my_string: String<11>
  │         ^^^^^^^^^^^^^^^^^^^^^ String<11>

note: 
  ┌─ features/external_contract.fe:7:5
  │  
7 │ ╭     pub fn emit_event(my_num: u256, my_addrs: Array<address, 5>, my_string: String<11>):
8 │ │         emit MyEvent(my_num, my_addrs, my_string)
  │ ╰─────────────────────────────────────────────────^ attributes hash: 18349539147683316743
  │  
  = FunctionSignature {
        self_decl: None,
        params: [
            FunctionParam {
                name: "my_num",
                typ: Ok(
                    Base(
                        Numeric(
                            U256,
                        ),
                    ),
                ),
            },
            FunctionParam {
                name: "my_addrs",
                typ: Ok(
                    Array(
                        Array {
                            size: 5,
                            inner: Address,
                        },
                    ),
                ),
            },
            FunctionParam {
                name: "my_string",
                typ: Ok(
                    String(
                        FeString {
                            max_size: 11,
                        },
                    ),
                ),
            },
        ],
        return_type: Ok(
            Base(
                Unit,
            ),
        ),
    }

note: 
  ┌─ features/external_contract.fe:8:22
  │
8 │         emit MyEvent(my_num, my_addrs, my_string)
  │                      ^^^^^^  ^^^^^^^^  ^^^^^^^^^ String<11>: Memory
  │                      │       │          
  │                      │       Array<address, 5>: Memory
  │                      u256: Value

note: 
  ┌─ features/external_contract.fe:8:9
  │
8 │         emit MyEvent(my_num, my_addrs, my_string)
  │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ attributes hash: 3872046667435269452
  │
  = Event {
        name: "MyEvent",
        fields: [
            EventField {
                name: "my_num",
                typ: Ok(
                    Base(
                        Numeric(
                            U256,
                        ),
                    ),
                ),
                is_indexed: false,
            },
            EventField {
                name: "my_addrs",
                typ: Ok(
                    Array(
                        Array {
                            size: 5,
                            inner: Address,
                        },
                    ),
                ),
                is_indexed: false,
            },
            EventField {
                name: "my_string",
                typ: Ok(
                    String(
                        FeString {
                            max_size: 11,
                        },
                    ),
                ),
                is_indexed: false,
            },
        ],
    }

note: 
   ┌─ features/external_contract.fe:10:5
   │  
10 │ ╭     pub fn build_array(a: u256, b: u256) -> Array<u256, 3>:
11 │ │         let my_array: Array<u256, 3>
12 │ │         my_array[0] = a
13 │ │         my_array[1] = a * b
14 │ │         my_array[2] = b
15 │ │         return my_array
   │ ╰───────────────────────^ attributes hash: 7166601560969052500
   │  
   = FunctionSignature {
         self_decl: None,
         params: [
             FunctionParam {
                 name: "a",
                 typ: Ok(
                     Base(
                         Numeric(
                             U256,
                         ),
                     ),
                 ),
             },
             FunctionParam {
                 name: "b",
                 typ: Ok(
                     Base(
                         Numeric(
                             U256,
                         ),
                     ),
                 ),
             },
         ],
         return_type: Ok(
             Array(
                 Array {
                     size: 3,
                     inner: Numeric(
                         U256,
                     ),
                 },
             ),
         ),
     }

note: 
   ┌─ features/external_contract.fe:11:23
   │
11 │         let my_array: Array<u256, 3>
   │                       ^^^^^^^^^^^^^^ Array<u256, 3>

note: 
   ┌─ features/external_contract.fe:12:9
   │
12 │         my_array[0] = a
   │         ^^^^^^^^ ^ u256: Value
   │         │         
   │         Array<u256, 3>: Memory

note: 
   ┌─ features/external_contract.fe:12:9
   │
12 │         my_array[0] = a
   │         ^^^^^^^^^^^   ^ u256: Value
   │         │              
   │         u256: Memory
13 │         my_array[1] = a * b
   │         ^^^^^^^^ ^ u256: Value
   │         │         
   │         Array<u256, 3>: Memory

note: 
   ┌─ features/external_contract.fe:13:9
   │
13 │         my_array[1] = a * b
   │         ^^^^^^^^^^^   ^   ^ u256: Value
   │         │             │    
   │         │             u256: Value
   │         u256: Memory

note: 
   ┌─ features/external_contract.fe:13:23
   │
13 │         my_array[1] = a * b
   │                       ^^^^^ u256: Value
14 │         my_array[2] = b
   │         ^^^^^^^^ ^ u256: Value
   │         │         
   │         Array<u256, 3>: Memory

note: 
   ┌─ features/external_contract.fe:14:9
   │
14 │         my_array[2] = b
   │         ^^^^^^^^^^^   ^ u256: Value
   │         │              
   │         u256: Memory
15 │         return my_array
   │                ^^^^^^^^ Array<u256, 3>: Memory

note: 
   ┌─ features/external_contract.fe:18:5
   │  
18 │ ╭     pub fn call_emit_event(
19 │ │         foo_address: address,
20 │ │         my_num: u256,
21 │ │         my_addrs: Array<address, 5>,
   · │
24 │ │         let foo: Foo = Foo(foo_address)
25 │ │         foo.emit_event(my_num, my_addrs, my_string)
   │ ╰───────────────────────────────────────────────────^ attributes hash: 17183077571888547848
   │  
   = FunctionSignature {
         self_decl: None,
         params: [
             FunctionParam {
                 name: "foo_address",
                 typ: Ok(
                     Base(
                         Address,
                     ),
                 ),
             },
             FunctionParam {
                 name: "my_num",
                 typ: Ok(
                     Base(
                         Numeric(
                             U256,
                         ),
                     ),
                 ),
             },
             FunctionParam {
                 name: "my_addrs",
                 typ: Ok(
                     Array(
                         Array {
                             size: 5,
                             inner: Address,
                         },
                     ),
                 ),
             },
             FunctionParam {
                 name: "my_string",
                 typ: Ok(
                     String(
                         FeString {
                             max_size: 11,
                         },
                     ),
                 ),
             },
         ],
         return_type: Ok(
             Base(
                 Unit,
             ),
         ),
     }

note: 
   ┌─ features/external_contract.fe:24:18
   │
24 │         let foo: Foo = Foo(foo_address)
   │                  ^^^ Foo

note: 
   ┌─ features/external_contract.fe:24:28
   │
24 │         let foo: Foo = Foo(foo_address)
   │                            ^^^^^^^^^^^ address: Value

note: 
   ┌─ features/external_contract.fe:24:24
   │
24 │         let foo: Foo = Foo(foo_address)
   │                        ^^^^^^^^^^^^^^^^ Foo: Value
25 │         foo.emit_event(my_num, my_addrs, my_string)
   │         ^^^            ^^^^^^  ^^^^^^^^  ^^^^^^^^^ String<11>: Memory
   │         │              │       │          
   │         │              │       Array<address, 5>: Memory
   │         │              u256: Value
   │         Foo: Value

note: 
   ┌─ features/external_contract.fe:25:9
   │
25 │         foo.emit_event(my_num, my_addrs, my_string)
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (): Value

note: 
   ┌─ features/external_contract.fe:24:24
   │
24 │         let foo: Foo = Foo(foo_address)
   │                        ^^^ TypeConstructor(Contract(Contract { name: "Foo", id: ContractId(0) }))
25 │         foo.emit_event(my_num, my_addrs, my_string)
   │         ^^^^^^^^^^^^^^ External { contract: ContractId(0), function: FunctionId(0) }

note: 
   ┌─ features/external_contract.fe:27:5
   │  
27 │ ╭     pub fn call_build_array(
28 │ │          foo_address: address,
29 │ │          a: u256,
30 │ │          b: u256,
31 │ │     ) -> Array<u256, 3>:
32 │ │         let foo: Foo = Foo(foo_address)
33 │ │         return foo.build_array(a, b)
   │ ╰────────────────────────────────────^ attributes hash: 6783560394552784988
   │  
   = FunctionSignature {
         self_decl: None,
         params: [
             FunctionParam {
                 name: "foo_address",
                 typ: Ok(
                     Base(
                         Address,
                     ),
                 ),
             },
             FunctionParam {
                 name: "a",
                 typ: Ok(
                     Base(
                         Numeric(
                             U256,
                         ),
                     ),
                 ),
             },
             FunctionParam {
                 name: "b",
                 typ: Ok(
                     Base(
                         Numeric(
                             U256,
                         ),
                     ),
                 ),
             },
         ],
         return_type: Ok(
             Array(
                 Array {
                     size: 3,
                     inner: Numeric(
                         U256,
                     ),
                 },
             ),
         ),
     }

note: 
   ┌─ features/external_contract.fe:32:18
   │
32 │         let foo: Foo = Foo(foo_address)
   │                  ^^^ Foo

note: 
   ┌─ features/external_contract.fe:32:28
   │
32 │         let foo: Foo = Foo(foo_address)
   │                            ^^^^^^^^^^^ address: Value

note: 
   ┌─ features/external_contract.fe:32:24
   │
32 │         let foo: Foo = Foo(foo_address)
   │                        ^^^^^^^^^^^^^^^^ Foo: Value
33 │         return foo.build_array(a, b)
   │                ^^^             ^  ^ u256: Value
   │                │               │   
   │                │               u256: Value
   │                Foo: Value

note: 
   ┌─ features/external_contract.fe:33:16
   │
33 │         return foo.build_array(a, b)
   │                ^^^^^^^^^^^^^^^^^^^^^ Array<u256, 3>: Memory

note: 
   ┌─ features/external_contract.fe:32:24
   │
32 │         let foo: Foo = Foo(foo_address)
   │                        ^^^ TypeConstructor(Contract(Contract { name: "Foo", id: ContractId(0) }))
33 │         return foo.build_array(a, b)
   │                ^^^^^^^^^^^^^^^ External { contract: ContractId(0), function: FunctionId(1) }


