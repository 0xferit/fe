---
source: crates/analyzer/tests/analysis.rs
expression: "build_snapshot(\"features/nested_map.fe\", &src, module, &db)"

---
note: 
  ┌─ features/nested_map.fe:2:5
  │
2 │     bar: Map<address, Map<address, u256>>
  │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Map<address, Map<address, u256>>

note: 
  ┌─ features/nested_map.fe:3:5
  │
3 │     baz: Map<address, Map<u256, bool>>
  │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Map<address, Map<u256, bool>>

note: 
  ┌─ features/nested_map.fe:5:5
  │  
5 │ ╭     pub fn read_bar(self, a: address, b: address) -> u256:
6 │ │         return self.bar[a][b]
  │ ╰─────────────────────────────^ attributes hash: 10579681573605137522
  │  
  = FunctionSignature {
        self_decl: Mutable,
        params: [
            FunctionParam {
                name: "a",
                typ: Ok(
                    Base(
                        Address,
                    ),
                ),
            },
            FunctionParam {
                name: "b",
                typ: Ok(
                    Base(
                        Address,
                    ),
                ),
            },
        ],
        return_type: Ok(
            Base(
                Numeric(
                    U256,
                ),
            ),
        ),
    }

note: 
  ┌─ features/nested_map.fe:8:5
  │  
8 │ ╭     pub fn write_bar(self, a: address, b: address, value: u256):
9 │ │         self.bar[a][b] = value
  │ ╰──────────────────────────────^ attributes hash: 6159174104336834167
  │  
  = FunctionSignature {
        self_decl: Mutable,
        params: [
            FunctionParam {
                name: "a",
                typ: Ok(
                    Base(
                        Address,
                    ),
                ),
            },
            FunctionParam {
                name: "b",
                typ: Ok(
                    Base(
                        Address,
                    ),
                ),
            },
            FunctionParam {
                name: "value",
                typ: Ok(
                    Base(
                        Numeric(
                            U256,
                        ),
                    ),
                ),
            },
        ],
        return_type: Ok(
            Base(
                Unit,
            ),
        ),
    }

note: 
   ┌─ features/nested_map.fe:11:5
   │  
11 │ ╭     pub fn read_baz(self, a: address, b: u256) -> bool:
12 │ │         return self.baz[a][b]
   │ ╰─────────────────────────────^ attributes hash: 4588948300794405674
   │  
   = FunctionSignature {
         self_decl: Mutable,
         params: [
             FunctionParam {
                 name: "a",
                 typ: Ok(
                     Base(
                         Address,
                     ),
                 ),
             },
             FunctionParam {
                 name: "b",
                 typ: Ok(
                     Base(
                         Numeric(
                             U256,
                         ),
                     ),
                 ),
             },
         ],
         return_type: Ok(
             Base(
                 Bool,
             ),
         ),
     }

note: 
   ┌─ features/nested_map.fe:14:5
   │  
14 │ ╭     pub fn write_baz(self, a: address, b: u256, value: bool):
15 │ │         self.baz[a][b] = value
   │ ╰──────────────────────────────^ attributes hash: 6894542203512356705
   │  
   = FunctionSignature {
         self_decl: Mutable,
         params: [
             FunctionParam {
                 name: "a",
                 typ: Ok(
                     Base(
                         Address,
                     ),
                 ),
             },
             FunctionParam {
                 name: "b",
                 typ: Ok(
                     Base(
                         Numeric(
                             U256,
                         ),
                     ),
                 ),
             },
             FunctionParam {
                 name: "value",
                 typ: Ok(
                     Base(
                         Bool,
                     ),
                 ),
             },
         ],
         return_type: Ok(
             Base(
                 Unit,
             ),
         ),
     }

note: 
  ┌─ features/nested_map.fe:6:16
  │
6 │         return self.bar[a][b]
  │                ^^^^^^^^ Map<address, Map<address, u256>>: Storage { nonce: Some(0) } => None

note: 
  ┌─ features/nested_map.fe:6:25
  │
6 │         return self.bar[a][b]
  │                         ^ address: Value => None

note: 
  ┌─ features/nested_map.fe:6:16
  │
6 │         return self.bar[a][b]
  │                ^^^^^^^^^^^ Map<address, u256>: Storage { nonce: None } => None

note: 
  ┌─ features/nested_map.fe:6:28
  │
6 │         return self.bar[a][b]
  │                            ^ address: Value => None

note: 
  ┌─ features/nested_map.fe:6:16
  │
6 │         return self.bar[a][b]
  │                ^^^^^^^^^^^^^^ u256: Storage { nonce: None } => Some(Value)

note: 
  ┌─ features/nested_map.fe:9:9
  │
9 │         self.bar[a][b] = value
  │         ^^^^^^^^ Map<address, Map<address, u256>>: Storage { nonce: Some(0) } => None

note: 
  ┌─ features/nested_map.fe:9:18
  │
9 │         self.bar[a][b] = value
  │                  ^ address: Value => None

note: 
  ┌─ features/nested_map.fe:9:9
  │
9 │         self.bar[a][b] = value
  │         ^^^^^^^^^^^ Map<address, u256>: Storage { nonce: None } => None

note: 
  ┌─ features/nested_map.fe:9:21
  │
9 │         self.bar[a][b] = value
  │                     ^ address: Value => None

note: 
  ┌─ features/nested_map.fe:9:9
  │
9 │         self.bar[a][b] = value
  │         ^^^^^^^^^^^^^^ u256: Storage { nonce: None } => None

note: 
  ┌─ features/nested_map.fe:9:26
  │
9 │         self.bar[a][b] = value
  │                          ^^^^^ u256: Value => None

note: 
   ┌─ features/nested_map.fe:12:16
   │
12 │         return self.baz[a][b]
   │                ^^^^^^^^ Map<address, Map<u256, bool>>: Storage { nonce: Some(1) } => None

note: 
   ┌─ features/nested_map.fe:12:25
   │
12 │         return self.baz[a][b]
   │                         ^ address: Value => None

note: 
   ┌─ features/nested_map.fe:12:16
   │
12 │         return self.baz[a][b]
   │                ^^^^^^^^^^^ Map<u256, bool>: Storage { nonce: None } => None

note: 
   ┌─ features/nested_map.fe:12:28
   │
12 │         return self.baz[a][b]
   │                            ^ u256: Value => None

note: 
   ┌─ features/nested_map.fe:12:16
   │
12 │         return self.baz[a][b]
   │                ^^^^^^^^^^^^^^ bool: Storage { nonce: None } => Some(Value)

note: 
   ┌─ features/nested_map.fe:15:9
   │
15 │         self.baz[a][b] = value
   │         ^^^^^^^^ Map<address, Map<u256, bool>>: Storage { nonce: Some(1) } => None

note: 
   ┌─ features/nested_map.fe:15:18
   │
15 │         self.baz[a][b] = value
   │                  ^ address: Value => None

note: 
   ┌─ features/nested_map.fe:15:9
   │
15 │         self.baz[a][b] = value
   │         ^^^^^^^^^^^ Map<u256, bool>: Storage { nonce: None } => None

note: 
   ┌─ features/nested_map.fe:15:21
   │
15 │         self.baz[a][b] = value
   │                     ^ u256: Value => None

note: 
   ┌─ features/nested_map.fe:15:9
   │
15 │         self.baz[a][b] = value
   │         ^^^^^^^^^^^^^^ bool: Storage { nonce: None } => None

note: 
   ┌─ features/nested_map.fe:15:26
   │
15 │         self.baz[a][b] = value
   │                          ^^^^^ bool: Value => None


