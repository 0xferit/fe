---
source: crates/analyzer/tests/analysis.rs
expression: "build_snapshot(\"stress/data_copying_stress.fe\", &src, module, &db)"

---
note: 
  ┌─ stress/data_copying_stress.fe:2:5
  │
2 │     my_string: String<42>
  │     ^^^^^^^^^^^^^^^^^^^^^ String<42>

note: 
  ┌─ stress/data_copying_stress.fe:3:5
  │
3 │     my_other_string: String<42>
  │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ String<42>

note: 
  ┌─ stress/data_copying_stress.fe:5:5
  │
5 │     my_u256: u256
  │     ^^^^^^^^^^^^^ u256

note: 
  ┌─ stress/data_copying_stress.fe:6:5
  │
6 │     my_other_u256: u256
  │     ^^^^^^^^^^^^^^^^^^^ u256

note: 
  ┌─ stress/data_copying_stress.fe:8:5
  │
8 │     my_nums: u256[5]
  │     ^^^^^^^^^^^^^^^^ u256[5]

note: 
   ┌─ stress/data_copying_stress.fe:10:5
   │
10 │     my_addrs: address[3]
   │     ^^^^^^^^^^^^^^^^^^^^ address[3]

note: 
   ┌─ stress/data_copying_stress.fe:13:9
   │
13 │         my_string: String<42>
   │         ^^^^^^^^^^^^^^^^^^^^^ String<42>

note: 
   ┌─ stress/data_copying_stress.fe:14:9
   │
14 │         my_u256: u256
   │         ^^^^^^^^^^^^^ u256

note: 
   ┌─ stress/data_copying_stress.fe:16:5
   │  
16 │ ╭     pub fn set_my_vals(
17 │ │         my_string: String<42>,
18 │ │         my_other_string: String<42>,
19 │ │         my_u256: u256,
   · │
24 │ │         self.my_u256 = my_u256
25 │ │         self.my_other_u256 = my_other_u256
   │ ╰──────────────────────────────────────────^ attributes hash: 11884175539472018634
   │  
   = FunctionSignature {
         params: [
             FunctionParam {
                 name: "my_string",
                 typ: Ok(
                     String(
                         FeString {
                             max_size: 42,
                         },
                     ),
                 ),
             },
             FunctionParam {
                 name: "my_other_string",
                 typ: Ok(
                     String(
                         FeString {
                             max_size: 42,
                         },
                     ),
                 ),
             },
             FunctionParam {
                 name: "my_u256",
                 typ: Ok(
                     Base(
                         Numeric(
                             U256,
                         ),
                     ),
                 ),
             },
             FunctionParam {
                 name: "my_other_u256",
                 typ: Ok(
                     Base(
                         Numeric(
                             U256,
                         ),
                     ),
                 ),
             },
         ],
         return_type: Ok(
             Base(
                 Unit,
             ),
         ),
     }

note: 
   ┌─ stress/data_copying_stress.fe:27:5
   │  
27 │ ╭     pub fn set_to_my_other_vals():
28 │ │         self.my_string = self.my_other_string
29 │ │         self.my_u256 = self.my_other_u256
   │ ╰─────────────────────────────────────────^ attributes hash: 17883060253504188551
   │  
   = FunctionSignature {
         params: [],
         return_type: Ok(
             Base(
                 Unit,
             ),
         ),
     }

note: 
   ┌─ stress/data_copying_stress.fe:31:5
   │  
31 │ ╭     pub fn multiple_references_shared_memory(my_array: u256[10]):
32 │ │         let my_2nd_array: u256[10] = my_array
33 │ │         let my_3rd_array: u256[10] = my_2nd_array
34 │ │ 
   · │
43 │ │         assert my_2nd_array[3] == 50
44 │ │         assert my_3rd_array[3] == 50
   │ ╰────────────────────────────────────^ attributes hash: 9113446910234840700
   │  
   = FunctionSignature {
         params: [
             FunctionParam {
                 name: "my_array",
                 typ: Ok(
                     Array(
                         Array {
                             size: 10,
                             inner: Numeric(
                                 U256,
                             ),
                         },
                     ),
                 ),
             },
         ],
         return_type: Ok(
             Base(
                 Unit,
             ),
         ),
     }

note: 
   ┌─ stress/data_copying_stress.fe:46:5
   │  
46 │ ╭     pub fn mutate_and_return(my_array: u256[10]) -> u256[10]:
47 │ │         my_array[3] = 5
48 │ │         return my_array
   │ ╰───────────────────────^ attributes hash: 21666037945659926
   │  
   = FunctionSignature {
         params: [
             FunctionParam {
                 name: "my_array",
                 typ: Ok(
                     Array(
                         Array {
                             size: 10,
                             inner: Numeric(
                                 U256,
                             ),
                         },
                     ),
                 ),
             },
         ],
         return_type: Ok(
             Array(
                 Array {
                     size: 10,
                     inner: Numeric(
                         U256,
                     ),
                 },
             ),
         ),
     }

note: 
   ┌─ stress/data_copying_stress.fe:50:5
   │  
50 │ ╭     pub fn clone_and_return(my_array: u256[10]) -> u256[10]:
51 │ │         return my_array.clone()
   │ ╰───────────────────────────────^ attributes hash: 21666037945659926
   │  
   = FunctionSignature {
         params: [
             FunctionParam {
                 name: "my_array",
                 typ: Ok(
                     Array(
                         Array {
                             size: 10,
                             inner: Numeric(
                                 U256,
                             ),
                         },
                     ),
                 ),
             },
         ],
         return_type: Ok(
             Array(
                 Array {
                     size: 10,
                     inner: Numeric(
                         U256,
                     ),
                 },
             ),
         ),
     }

note: 
   ┌─ stress/data_copying_stress.fe:53:5
   │  
53 │ ╭     pub fn clone_mutate_and_return(my_array: u256[10]) -> u256[10]:
54 │ │         my_array.clone()[3] = 5
55 │ │         return my_array
   │ ╰───────────────────────^ attributes hash: 21666037945659926
   │  
   = FunctionSignature {
         params: [
             FunctionParam {
                 name: "my_array",
                 typ: Ok(
                     Array(
                         Array {
                             size: 10,
                             inner: Numeric(
                                 U256,
                             ),
                         },
                     ),
                 ),
             },
         ],
         return_type: Ok(
             Array(
                 Array {
                     size: 10,
                     inner: Numeric(
                         U256,
                     ),
                 },
             ),
         ),
     }

note: 
   ┌─ stress/data_copying_stress.fe:57:5
   │  
57 │ ╭     pub fn assign_my_nums_and_return() -> u256[5]:
58 │ │         let my_nums_mem: u256[5]
59 │ │         self.my_nums[0] = 42
60 │ │         self.my_nums[1] = 26
   · │
64 │ │         my_nums_mem = self.my_nums.to_mem()
65 │ │         return my_nums_mem
   │ ╰──────────────────────────^ attributes hash: 4738189056135306967
   │  
   = FunctionSignature {
         params: [],
         return_type: Ok(
             Array(
                 Array {
                     size: 5,
                     inner: Numeric(
                         U256,
                     ),
                 },
             ),
         ),
     }

note: 
   ┌─ stress/data_copying_stress.fe:67:5
   │  
67 │ ╭     pub fn emit_my_event():
68 │ │         self.emit_my_event_internal(
69 │ │             self.my_string.to_mem(),
70 │ │             self.my_u256.to_mem()
71 │ │         )
   │ ╰─────────^ attributes hash: 17883060253504188551
   │  
   = FunctionSignature {
         params: [],
         return_type: Ok(
             Base(
                 Unit,
             ),
         ),
     }

note: 
   ┌─ stress/data_copying_stress.fe:73:5
   │  
73 │ ╭     fn emit_my_event_internal(some_string: String<42>, some_u256: u256):
74 │ │         emit MyEvent(my_string=some_string, my_u256=some_u256)
   │ ╰──────────────────────────────────────────────────────────────^ attributes hash: 5409206322988374919
   │  
   = FunctionSignature {
         params: [
             FunctionParam {
                 name: "some_string",
                 typ: Ok(
                     String(
                         FeString {
                             max_size: 42,
                         },
                     ),
                 ),
             },
             FunctionParam {
                 name: "some_u256",
                 typ: Ok(
                     Base(
                         Numeric(
                             U256,
                         ),
                     ),
                 ),
             },
         ],
         return_type: Ok(
             Base(
                 Unit,
             ),
         ),
     }

note: 
   ┌─ stress/data_copying_stress.fe:76:5
   │  
76 │ ╭     pub fn set_my_addrs(my_addrs: address[3]):
77 │ │         self.my_addrs = my_addrs
   │ ╰────────────────────────────────^ attributes hash: 6574906467163987131
   │  
   = FunctionSignature {
         params: [
             FunctionParam {
                 name: "my_addrs",
                 typ: Ok(
                     Array(
                         Array {
                             size: 3,
                             inner: Address,
                         },
                     ),
                 ),
             },
         ],
         return_type: Ok(
             Base(
                 Unit,
             ),
         ),
     }

note: 
   ┌─ stress/data_copying_stress.fe:79:5
   │  
79 │ ╭     pub fn get_my_second_addr() -> address:
80 │ │         return self.my_addrs[1]
   │ ╰───────────────────────────────^ attributes hash: 2195077967527136217
   │  
   = FunctionSignature {
         params: [],
         return_type: Ok(
             Base(
                 Address,
             ),
         ),
     }

note: 
   ┌─ stress/data_copying_stress.fe:22:9
   │
22 │         self.my_string = my_string
   │         ^^^^^^^^^^^^^^ String<42>: Storage { nonce: Some(0) } => None

note: 
   ┌─ stress/data_copying_stress.fe:22:26
   │
22 │         self.my_string = my_string
   │                          ^^^^^^^^^ String<42>: Memory => None

note: 
   ┌─ stress/data_copying_stress.fe:23:9
   │
23 │         self.my_other_string = my_other_string
   │         ^^^^^^^^^^^^^^^^^^^^ String<42>: Storage { nonce: Some(1) } => None

note: 
   ┌─ stress/data_copying_stress.fe:23:32
   │
23 │         self.my_other_string = my_other_string
   │                                ^^^^^^^^^^^^^^^ String<42>: Memory => None

note: 
   ┌─ stress/data_copying_stress.fe:24:9
   │
24 │         self.my_u256 = my_u256
   │         ^^^^^^^^^^^^ u256: Storage { nonce: Some(2) } => None

note: 
   ┌─ stress/data_copying_stress.fe:24:24
   │
24 │         self.my_u256 = my_u256
   │                        ^^^^^^^ u256: Value => None

note: 
   ┌─ stress/data_copying_stress.fe:25:9
   │
25 │         self.my_other_u256 = my_other_u256
   │         ^^^^^^^^^^^^^^^^^^ u256: Storage { nonce: Some(3) } => None

note: 
   ┌─ stress/data_copying_stress.fe:25:30
   │
25 │         self.my_other_u256 = my_other_u256
   │                              ^^^^^^^^^^^^^ u256: Value => None

note: 
   ┌─ stress/data_copying_stress.fe:28:9
   │
28 │         self.my_string = self.my_other_string
   │         ^^^^^^^^^^^^^^ String<42>: Storage { nonce: Some(0) } => None

note: 
   ┌─ stress/data_copying_stress.fe:28:26
   │
28 │         self.my_string = self.my_other_string
   │                          ^^^^^^^^^^^^^^^^^^^^ String<42>: Storage { nonce: Some(1) } => None

note: 
   ┌─ stress/data_copying_stress.fe:29:9
   │
29 │         self.my_u256 = self.my_other_u256
   │         ^^^^^^^^^^^^ u256: Storage { nonce: Some(2) } => None

note: 
   ┌─ stress/data_copying_stress.fe:29:24
   │
29 │         self.my_u256 = self.my_other_u256
   │                        ^^^^^^^^^^^^^^^^^^ u256: Storage { nonce: Some(3) } => None

note: 
   ┌─ stress/data_copying_stress.fe:32:38
   │
32 │         let my_2nd_array: u256[10] = my_array
   │                                      ^^^^^^^^ u256[10]: Memory => None

note: 
   ┌─ stress/data_copying_stress.fe:33:38
   │
33 │         let my_3rd_array: u256[10] = my_2nd_array
   │                                      ^^^^^^^^^^^^ u256[10]: Memory => None

note: 
   ┌─ stress/data_copying_stress.fe:35:16
   │
35 │         assert my_array[3] != 5
   │                ^^^^^^^^ u256[10]: Memory => None

note: 
   ┌─ stress/data_copying_stress.fe:35:25
   │
35 │         assert my_array[3] != 5
   │                         ^ u256: Value => None

note: 
   ┌─ stress/data_copying_stress.fe:35:16
   │
35 │         assert my_array[3] != 5
   │                ^^^^^^^^^^^ u256: Memory => Some(Value)

note: 
   ┌─ stress/data_copying_stress.fe:35:31
   │
35 │         assert my_array[3] != 5
   │                               ^ u256: Value => None

note: 
   ┌─ stress/data_copying_stress.fe:35:16
   │
35 │         assert my_array[3] != 5
   │                ^^^^^^^^^^^^^^^^ bool: Value => None

note: 
   ┌─ stress/data_copying_stress.fe:36:9
   │
36 │         my_array[3] = 5
   │         ^^^^^^^^ u256[10]: Memory => None

note: 
   ┌─ stress/data_copying_stress.fe:36:18
   │
36 │         my_array[3] = 5
   │                  ^ u256: Value => None

note: 
   ┌─ stress/data_copying_stress.fe:36:9
   │
36 │         my_array[3] = 5
   │         ^^^^^^^^^^^ u256: Memory => None

note: 
   ┌─ stress/data_copying_stress.fe:36:23
   │
36 │         my_array[3] = 5
   │                       ^ u256: Value => None

note: 
   ┌─ stress/data_copying_stress.fe:37:16
   │
37 │         assert my_array[3] == 5
   │                ^^^^^^^^ u256[10]: Memory => None

note: 
   ┌─ stress/data_copying_stress.fe:37:25
   │
37 │         assert my_array[3] == 5
   │                         ^ u256: Value => None

note: 
   ┌─ stress/data_copying_stress.fe:37:16
   │
37 │         assert my_array[3] == 5
   │                ^^^^^^^^^^^ u256: Memory => Some(Value)

note: 
   ┌─ stress/data_copying_stress.fe:37:31
   │
37 │         assert my_array[3] == 5
   │                               ^ u256: Value => None

note: 
   ┌─ stress/data_copying_stress.fe:37:16
   │
37 │         assert my_array[3] == 5
   │                ^^^^^^^^^^^^^^^^ bool: Value => None

note: 
   ┌─ stress/data_copying_stress.fe:38:16
   │
38 │         assert my_2nd_array[3] == 5
   │                ^^^^^^^^^^^^ u256[10]: Memory => None

note: 
   ┌─ stress/data_copying_stress.fe:38:29
   │
38 │         assert my_2nd_array[3] == 5
   │                             ^ u256: Value => None

note: 
   ┌─ stress/data_copying_stress.fe:38:16
   │
38 │         assert my_2nd_array[3] == 5
   │                ^^^^^^^^^^^^^^^ u256: Memory => Some(Value)

note: 
   ┌─ stress/data_copying_stress.fe:38:35
   │
38 │         assert my_2nd_array[3] == 5
   │                                   ^ u256: Value => None

note: 
   ┌─ stress/data_copying_stress.fe:38:16
   │
38 │         assert my_2nd_array[3] == 5
   │                ^^^^^^^^^^^^^^^^^^^^ bool: Value => None

note: 
   ┌─ stress/data_copying_stress.fe:39:16
   │
39 │         assert my_3rd_array[3] == 5
   │                ^^^^^^^^^^^^ u256[10]: Memory => None

note: 
   ┌─ stress/data_copying_stress.fe:39:29
   │
39 │         assert my_3rd_array[3] == 5
   │                             ^ u256: Value => None

note: 
   ┌─ stress/data_copying_stress.fe:39:16
   │
39 │         assert my_3rd_array[3] == 5
   │                ^^^^^^^^^^^^^^^ u256: Memory => Some(Value)

note: 
   ┌─ stress/data_copying_stress.fe:39:35
   │
39 │         assert my_3rd_array[3] == 5
   │                                   ^ u256: Value => None

note: 
   ┌─ stress/data_copying_stress.fe:39:16
   │
39 │         assert my_3rd_array[3] == 5
   │                ^^^^^^^^^^^^^^^^^^^^ bool: Value => None

note: 
   ┌─ stress/data_copying_stress.fe:41:9
   │
41 │         my_3rd_array[3] = 50
   │         ^^^^^^^^^^^^ u256[10]: Memory => None

note: 
   ┌─ stress/data_copying_stress.fe:41:22
   │
41 │         my_3rd_array[3] = 50
   │                      ^ u256: Value => None

note: 
   ┌─ stress/data_copying_stress.fe:41:9
   │
41 │         my_3rd_array[3] = 50
   │         ^^^^^^^^^^^^^^^ u256: Memory => None

note: 
   ┌─ stress/data_copying_stress.fe:41:27
   │
41 │         my_3rd_array[3] = 50
   │                           ^^ u256: Value => None

note: 
   ┌─ stress/data_copying_stress.fe:42:16
   │
42 │         assert my_array[3] == 50
   │                ^^^^^^^^ u256[10]: Memory => None

note: 
   ┌─ stress/data_copying_stress.fe:42:25
   │
42 │         assert my_array[3] == 50
   │                         ^ u256: Value => None

note: 
   ┌─ stress/data_copying_stress.fe:42:16
   │
42 │         assert my_array[3] == 50
   │                ^^^^^^^^^^^ u256: Memory => Some(Value)

note: 
   ┌─ stress/data_copying_stress.fe:42:31
   │
42 │         assert my_array[3] == 50
   │                               ^^ u256: Value => None

note: 
   ┌─ stress/data_copying_stress.fe:42:16
   │
42 │         assert my_array[3] == 50
   │                ^^^^^^^^^^^^^^^^^ bool: Value => None

note: 
   ┌─ stress/data_copying_stress.fe:43:16
   │
43 │         assert my_2nd_array[3] == 50
   │                ^^^^^^^^^^^^ u256[10]: Memory => None

note: 
   ┌─ stress/data_copying_stress.fe:43:29
   │
43 │         assert my_2nd_array[3] == 50
   │                             ^ u256: Value => None

note: 
   ┌─ stress/data_copying_stress.fe:43:16
   │
43 │         assert my_2nd_array[3] == 50
   │                ^^^^^^^^^^^^^^^ u256: Memory => Some(Value)

note: 
   ┌─ stress/data_copying_stress.fe:43:35
   │
43 │         assert my_2nd_array[3] == 50
   │                                   ^^ u256: Value => None

note: 
   ┌─ stress/data_copying_stress.fe:43:16
   │
43 │         assert my_2nd_array[3] == 50
   │                ^^^^^^^^^^^^^^^^^^^^^ bool: Value => None

note: 
   ┌─ stress/data_copying_stress.fe:44:16
   │
44 │         assert my_3rd_array[3] == 50
   │                ^^^^^^^^^^^^ u256[10]: Memory => None

note: 
   ┌─ stress/data_copying_stress.fe:44:29
   │
44 │         assert my_3rd_array[3] == 50
   │                             ^ u256: Value => None

note: 
   ┌─ stress/data_copying_stress.fe:44:16
   │
44 │         assert my_3rd_array[3] == 50
   │                ^^^^^^^^^^^^^^^ u256: Memory => Some(Value)

note: 
   ┌─ stress/data_copying_stress.fe:44:35
   │
44 │         assert my_3rd_array[3] == 50
   │                                   ^^ u256: Value => None

note: 
   ┌─ stress/data_copying_stress.fe:44:16
   │
44 │         assert my_3rd_array[3] == 50
   │                ^^^^^^^^^^^^^^^^^^^^^ bool: Value => None

note: 
   ┌─ stress/data_copying_stress.fe:47:9
   │
47 │         my_array[3] = 5
   │         ^^^^^^^^ u256[10]: Memory => None

note: 
   ┌─ stress/data_copying_stress.fe:47:18
   │
47 │         my_array[3] = 5
   │                  ^ u256: Value => None

note: 
   ┌─ stress/data_copying_stress.fe:47:9
   │
47 │         my_array[3] = 5
   │         ^^^^^^^^^^^ u256: Memory => None

note: 
   ┌─ stress/data_copying_stress.fe:47:23
   │
47 │         my_array[3] = 5
   │                       ^ u256: Value => None

note: 
   ┌─ stress/data_copying_stress.fe:48:16
   │
48 │         return my_array
   │                ^^^^^^^^ u256[10]: Memory => None

note: 
   ┌─ stress/data_copying_stress.fe:51:16
   │
51 │         return my_array.clone()
   │                ^^^^^^^^ u256[10]: Memory => None

note: 
   ┌─ stress/data_copying_stress.fe:51:16
   │
51 │         return my_array.clone()
   │                ^^^^^^^^^^^^^^^^ u256[10]: Memory => Some(Memory)

note: 
   ┌─ stress/data_copying_stress.fe:54:9
   │
54 │         my_array.clone()[3] = 5
   │         ^^^^^^^^ u256[10]: Memory => None

note: 
   ┌─ stress/data_copying_stress.fe:54:9
   │
54 │         my_array.clone()[3] = 5
   │         ^^^^^^^^^^^^^^^^ u256[10]: Memory => Some(Memory)

note: 
   ┌─ stress/data_copying_stress.fe:54:26
   │
54 │         my_array.clone()[3] = 5
   │                          ^ u256: Value => None

note: 
   ┌─ stress/data_copying_stress.fe:54:9
   │
54 │         my_array.clone()[3] = 5
   │         ^^^^^^^^^^^^^^^^^^^ u256: Memory => None

note: 
   ┌─ stress/data_copying_stress.fe:54:31
   │
54 │         my_array.clone()[3] = 5
   │                               ^ u256: Value => None

note: 
   ┌─ stress/data_copying_stress.fe:55:16
   │
55 │         return my_array
   │                ^^^^^^^^ u256[10]: Memory => None

note: 
   ┌─ stress/data_copying_stress.fe:59:9
   │
59 │         self.my_nums[0] = 42
   │         ^^^^^^^^^^^^ u256[5]: Storage { nonce: Some(4) } => None

note: 
   ┌─ stress/data_copying_stress.fe:59:22
   │
59 │         self.my_nums[0] = 42
   │                      ^ u256: Value => None

note: 
   ┌─ stress/data_copying_stress.fe:59:9
   │
59 │         self.my_nums[0] = 42
   │         ^^^^^^^^^^^^^^^ u256: Storage { nonce: None } => None

note: 
   ┌─ stress/data_copying_stress.fe:59:27
   │
59 │         self.my_nums[0] = 42
   │                           ^^ u256: Value => None

note: 
   ┌─ stress/data_copying_stress.fe:60:9
   │
60 │         self.my_nums[1] = 26
   │         ^^^^^^^^^^^^ u256[5]: Storage { nonce: Some(4) } => None

note: 
   ┌─ stress/data_copying_stress.fe:60:22
   │
60 │         self.my_nums[1] = 26
   │                      ^ u256: Value => None

note: 
   ┌─ stress/data_copying_stress.fe:60:9
   │
60 │         self.my_nums[1] = 26
   │         ^^^^^^^^^^^^^^^ u256: Storage { nonce: None } => None

note: 
   ┌─ stress/data_copying_stress.fe:60:27
   │
60 │         self.my_nums[1] = 26
   │                           ^^ u256: Value => None

note: 
   ┌─ stress/data_copying_stress.fe:61:9
   │
61 │         self.my_nums[2] = 0
   │         ^^^^^^^^^^^^ u256[5]: Storage { nonce: Some(4) } => None

note: 
   ┌─ stress/data_copying_stress.fe:61:22
   │
61 │         self.my_nums[2] = 0
   │                      ^ u256: Value => None

note: 
   ┌─ stress/data_copying_stress.fe:61:9
   │
61 │         self.my_nums[2] = 0
   │         ^^^^^^^^^^^^^^^ u256: Storage { nonce: None } => None

note: 
   ┌─ stress/data_copying_stress.fe:61:27
   │
61 │         self.my_nums[2] = 0
   │                           ^ u256: Value => None

note: 
   ┌─ stress/data_copying_stress.fe:62:9
   │
62 │         self.my_nums[3] = 1
   │         ^^^^^^^^^^^^ u256[5]: Storage { nonce: Some(4) } => None

note: 
   ┌─ stress/data_copying_stress.fe:62:22
   │
62 │         self.my_nums[3] = 1
   │                      ^ u256: Value => None

note: 
   ┌─ stress/data_copying_stress.fe:62:9
   │
62 │         self.my_nums[3] = 1
   │         ^^^^^^^^^^^^^^^ u256: Storage { nonce: None } => None

note: 
   ┌─ stress/data_copying_stress.fe:62:27
   │
62 │         self.my_nums[3] = 1
   │                           ^ u256: Value => None

note: 
   ┌─ stress/data_copying_stress.fe:63:9
   │
63 │         self.my_nums[4] = 255
   │         ^^^^^^^^^^^^ u256[5]: Storage { nonce: Some(4) } => None

note: 
   ┌─ stress/data_copying_stress.fe:63:22
   │
63 │         self.my_nums[4] = 255
   │                      ^ u256: Value => None

note: 
   ┌─ stress/data_copying_stress.fe:63:9
   │
63 │         self.my_nums[4] = 255
   │         ^^^^^^^^^^^^^^^ u256: Storage { nonce: None } => None

note: 
   ┌─ stress/data_copying_stress.fe:63:27
   │
63 │         self.my_nums[4] = 255
   │                           ^^^ u256: Value => None

note: 
   ┌─ stress/data_copying_stress.fe:64:9
   │
64 │         my_nums_mem = self.my_nums.to_mem()
   │         ^^^^^^^^^^^ u256[5]: Memory => None

note: 
   ┌─ stress/data_copying_stress.fe:64:23
   │
64 │         my_nums_mem = self.my_nums.to_mem()
   │                       ^^^^^^^^^^^^ u256[5]: Storage { nonce: Some(4) } => None

note: 
   ┌─ stress/data_copying_stress.fe:64:23
   │
64 │         my_nums_mem = self.my_nums.to_mem()
   │                       ^^^^^^^^^^^^^^^^^^^^^ u256[5]: Storage { nonce: Some(4) } => Some(Memory)

note: 
   ┌─ stress/data_copying_stress.fe:65:16
   │
65 │         return my_nums_mem
   │                ^^^^^^^^^^^ u256[5]: Memory => None

note: 
   ┌─ stress/data_copying_stress.fe:69:13
   │
69 │             self.my_string.to_mem(),
   │             ^^^^^^^^^^^^^^ String<42>: Storage { nonce: Some(0) } => None

note: 
   ┌─ stress/data_copying_stress.fe:69:13
   │
69 │             self.my_string.to_mem(),
   │             ^^^^^^^^^^^^^^^^^^^^^^^ String<42>: Storage { nonce: Some(0) } => Some(Memory)

note: 
   ┌─ stress/data_copying_stress.fe:70:13
   │
70 │             self.my_u256.to_mem()
   │             ^^^^^^^^^^^^ u256: Storage { nonce: Some(2) } => None

note: 
   ┌─ stress/data_copying_stress.fe:70:13
   │
70 │             self.my_u256.to_mem()
   │             ^^^^^^^^^^^^^^^^^^^^^ u256: Storage { nonce: Some(2) } => Some(Value)

note: 
   ┌─ stress/data_copying_stress.fe:68:9
   │  
68 │ ╭         self.emit_my_event_internal(
69 │ │             self.my_string.to_mem(),
70 │ │             self.my_u256.to_mem()
71 │ │         )
   │ ╰─────────^ (): Value => None

note: 
   ┌─ stress/data_copying_stress.fe:74:32
   │
74 │         emit MyEvent(my_string=some_string, my_u256=some_u256)
   │                                ^^^^^^^^^^^ String<42>: Memory => None

note: 
   ┌─ stress/data_copying_stress.fe:74:53
   │
74 │         emit MyEvent(my_string=some_string, my_u256=some_u256)
   │                                                     ^^^^^^^^^ u256: Value => None

note: 
   ┌─ stress/data_copying_stress.fe:77:9
   │
77 │         self.my_addrs = my_addrs
   │         ^^^^^^^^^^^^^ address[3]: Storage { nonce: Some(5) } => None

note: 
   ┌─ stress/data_copying_stress.fe:77:25
   │
77 │         self.my_addrs = my_addrs
   │                         ^^^^^^^^ address[3]: Memory => None

note: 
   ┌─ stress/data_copying_stress.fe:80:16
   │
80 │         return self.my_addrs[1]
   │                ^^^^^^^^^^^^^ address[3]: Storage { nonce: Some(5) } => None

note: 
   ┌─ stress/data_copying_stress.fe:80:30
   │
80 │         return self.my_addrs[1]
   │                              ^ u256: Value => None

note: 
   ┌─ stress/data_copying_stress.fe:80:16
   │
80 │         return self.my_addrs[1]
   │                ^^^^^^^^^^^^^^^^ address: Storage { nonce: None } => Some(Value)

note: 
   ┌─ stress/data_copying_stress.fe:74:9
   │
74 │         emit MyEvent(my_string=some_string, my_u256=some_u256)
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ attributes hash: 595206297963940250
   │
   = Event {
         name: "MyEvent",
         fields: [
             EventField {
                 name: "my_string",
                 typ: Ok(
                     String(
                         FeString {
                             max_size: 42,
                         },
                     ),
                 ),
                 is_indexed: false,
             },
             EventField {
                 name: "my_u256",
                 typ: Ok(
                     Base(
                         Numeric(
                             U256,
                         ),
                     ),
                 ),
                 is_indexed: false,
             },
         ],
     }

note: 
   ┌─ stress/data_copying_stress.fe:32:27
   │
32 │         let my_2nd_array: u256[10] = my_array
   │                           ^^^^^^^^ u256[10]

note: 
   ┌─ stress/data_copying_stress.fe:33:27
   │
33 │         let my_3rd_array: u256[10] = my_2nd_array
   │                           ^^^^^^^^ u256[10]

note: 
   ┌─ stress/data_copying_stress.fe:58:26
   │
58 │         let my_nums_mem: u256[5]
   │                          ^^^^^^^ u256[5]

note: 
   ┌─ stress/data_copying_stress.fe:51:16
   │
51 │         return my_array.clone()
   │                ^^^^^^^^^^^^^^ attributes hash: 15856680294290209687
   │
   = ValueAttribute

note: 
   ┌─ stress/data_copying_stress.fe:54:9
   │
54 │         my_array.clone()[3] = 5
   │         ^^^^^^^^^^^^^^ attributes hash: 15856680294290209687
   │
   = ValueAttribute

note: 
   ┌─ stress/data_copying_stress.fe:64:23
   │
64 │         my_nums_mem = self.my_nums.to_mem()
   │                       ^^^^^^^^^^^^^^^^^^^ attributes hash: 15856680294290209687
   │
   = ValueAttribute

note: 
   ┌─ stress/data_copying_stress.fe:68:9
   │
68 │         self.emit_my_event_internal(
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ attributes hash: 17599861255131653403
   │
   = SelfAttribute {
         func_name: "emit_my_event_internal",
     }

note: 
   ┌─ stress/data_copying_stress.fe:69:13
   │
69 │             self.my_string.to_mem(),
   │             ^^^^^^^^^^^^^^^^^^^^^ attributes hash: 15856680294290209687
   │
   = ValueAttribute

note: 
   ┌─ stress/data_copying_stress.fe:70:13
   │
70 │             self.my_u256.to_mem()
   │             ^^^^^^^^^^^^^^^^^^^ attributes hash: 15856680294290209687
   │
   = ValueAttribute


