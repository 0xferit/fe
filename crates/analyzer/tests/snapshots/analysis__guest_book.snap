---
source: crates/analyzer/tests/analysis.rs
expression: "build_snapshot(\"demos/guest_book.fe\", &src, &context)"

---
ModuleAttributes {
    type_defs: {
        "GuestBook": Contract(
            Contract {
                name: "GuestBook",
                functions: [
                    FunctionAttributes {
                        is_public: true,
                        name: "get_msg",
                        params: [
                            (
                                "addr",
                                Base(
                                    Address,
                                ),
                            ),
                        ],
                        return_type: String(
                            FeString {
                                max_size: 100,
                            },
                        ),
                    },
                    FunctionAttributes {
                        is_public: true,
                        name: "sign",
                        params: [
                            (
                                "book_msg",
                                String(
                                    FeString {
                                        max_size: 100,
                                    },
                                ),
                            ),
                        ],
                        return_type: Base(
                            Unit,
                        ),
                    },
                ],
            },
        ),
    },
}

note: 
   ┌─ demos/guest_book.fe:13:9
   │
13 │         self.messages[msg.sender] = book_msg
   │         ^^^^^^^^^^^^^ attributes hash: 2746859838733183336
   │
   = ExpressionAttributes {
         typ: Map(
             Map {
                 key: Address,
                 value: String(
                     FeString {
                         max_size: 100,
                     },
                 ),
             },
         ),
         location: Storage {
             nonce: Some(
                 0,
             ),
         },
         move_location: None,
     }

note: 
   ┌─ demos/guest_book.fe:13:23
   │
13 │         self.messages[msg.sender] = book_msg
   │                       ^^^^^^^^^^ attributes hash: 16366719240912622931
   │
   = ExpressionAttributes {
         typ: Base(
             Address,
         ),
         location: Value,
         move_location: None,
     }

note: 
   ┌─ demos/guest_book.fe:13:9
   │
13 │         self.messages[msg.sender] = book_msg
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^ attributes hash: 12192538827573539833
   │
   = ExpressionAttributes {
         typ: String(
             FeString {
                 max_size: 100,
             },
         ),
         location: Storage {
             nonce: None,
         },
         move_location: None,
     }

note: 
   ┌─ demos/guest_book.fe:13:37
   │
13 │         self.messages[msg.sender] = book_msg
   │                                     ^^^^^^^^ attributes hash: 10521411858691425038
   │
   = ExpressionAttributes {
         typ: String(
             FeString {
                 max_size: 100,
             },
         ),
         location: Memory,
         move_location: None,
     }

note: 
   ┌─ demos/guest_book.fe:16:30
   │
16 │         emit Signed(book_msg=book_msg)
   │                              ^^^^^^^^ attributes hash: 10521411858691425038
   │
   = ExpressionAttributes {
         typ: String(
             FeString {
                 max_size: 100,
             },
         ),
         location: Memory,
         move_location: None,
     }

note: 
   ┌─ demos/guest_book.fe:21:16
   │
21 │         return self.messages[addr].to_mem()
   │                ^^^^^^^^^^^^^ attributes hash: 2746859838733183336
   │
   = ExpressionAttributes {
         typ: Map(
             Map {
                 key: Address,
                 value: String(
                     FeString {
                         max_size: 100,
                     },
                 ),
             },
         ),
         location: Storage {
             nonce: Some(
                 0,
             ),
         },
         move_location: None,
     }

note: 
   ┌─ demos/guest_book.fe:21:30
   │
21 │         return self.messages[addr].to_mem()
   │                              ^^^^ attributes hash: 16366719240912622931
   │
   = ExpressionAttributes {
         typ: Base(
             Address,
         ),
         location: Value,
         move_location: None,
     }

note: 
   ┌─ demos/guest_book.fe:21:16
   │
21 │         return self.messages[addr].to_mem()
   │                ^^^^^^^^^^^^^^^^^^^ attributes hash: 12192538827573539833
   │
   = ExpressionAttributes {
         typ: String(
             FeString {
                 max_size: 100,
             },
         ),
         location: Storage {
             nonce: None,
         },
         move_location: None,
     }

note: 
   ┌─ demos/guest_book.fe:21:16
   │
21 │         return self.messages[addr].to_mem()
   │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ attributes hash: 13131138559634979239
   │
   = ExpressionAttributes {
         typ: String(
             FeString {
                 max_size: 100,
             },
         ),
         location: Storage {
             nonce: None,
         },
         move_location: Some(
             Memory,
         ),
     }

note: 
   ┌─ demos/guest_book.fe:16:9
   │
16 │         emit Signed(book_msg=book_msg)
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ attributes hash: 13470010196640787383
   │
   = EventDef {
         name: "Signed",
         topic: "0xcd5d879305a2503cad08d3e2d007778eec8dc5def7bc74dd20875842b2ff7765",
         fields: [
             (
                 "book_msg",
                 String(
                     FeString {
                         max_size: 100,
                     },
                 ),
             ),
         ],
         indexed_fields: [],
     }

note: 
   ┌─ demos/guest_book.fe:11:5
   │  
11 │ ╭     pub def sign(book_msg: String<100>):
12 │ │         # All storage access is explicit using `self.<some-key>`
13 │ │         self.messages[msg.sender] = book_msg
14 │ │ 
15 │ │         # Emit the `Signed` event
16 │ │         emit Signed(book_msg=book_msg)
   │ ╰──────────────────────────────────────^ attributes hash: 7570419795712838854
   │  
   = FunctionAttributes {
         is_public: true,
         name: "sign",
         params: [
             (
                 "book_msg",
                 String(
                     FeString {
                         max_size: 100,
                     },
                 ),
             ),
         ],
         return_type: Base(
             Unit,
         ),
     }

note: 
   ┌─ demos/guest_book.fe:18:5
   │  
18 │ ╭     pub def get_msg(addr: address) -> String<100>:
19 │ │         # Copying data from storage to memory
20 │ │         # has to be done explicitly via `to_mem()`
21 │ │         return self.messages[addr].to_mem()
   │ ╰───────────────────────────────────────────^ attributes hash: 14734697415390335008
   │  
   = FunctionAttributes {
         is_public: true,
         name: "get_msg",
         params: [
             (
                 "addr",
                 Base(
                     Address,
                 ),
             ),
         ],
         return_type: String(
             FeString {
                 max_size: 100,
             },
         ),
     }

note: 
   ┌─ demos/guest_book.fe:2:1
   │  
 2 │ ╭ contract GuestBook:
 3 │ │     # Strings are generic over a constant number
 4 │ │     # that restricts its maximum size
 5 │ │     messages: Map<address, String<100>>
   · │
20 │ │         # has to be done explicitly via `to_mem()`
21 │ │         return self.messages[addr].to_mem()
   │ ╰───────────────────────────────────────────^ attributes hash: 1117326237357203593
   │  
   = ContractAttributes {
         public_functions: [
             FunctionAttributes {
                 is_public: true,
                 name: "get_msg",
                 params: [
                     (
                         "addr",
                         Base(
                             Address,
                         ),
                     ),
                 ],
                 return_type: String(
                     FeString {
                         max_size: 100,
                     },
                 ),
             },
             FunctionAttributes {
                 is_public: true,
                 name: "sign",
                 params: [
                     (
                         "book_msg",
                         String(
                             FeString {
                                 max_size: 100,
                             },
                         ),
                     ),
                 ],
                 return_type: Base(
                     Unit,
                 ),
             },
         ],
         init_function: None,
         events: [
             EventDef {
                 name: "Signed",
                 topic: "0xcd5d879305a2503cad08d3e2d007778eec8dc5def7bc74dd20875842b2ff7765",
                 fields: [
                     (
                         "book_msg",
                         String(
                             FeString {
                                 max_size: 100,
                             },
                         ),
                     ),
                 ],
                 indexed_fields: [],
             },
         ],
         structs: [],
         external_contracts: [],
     }

note: 
   ┌─ demos/guest_book.fe:21:16
   │
21 │         return self.messages[addr].to_mem()
   │                ^^^^^^^^^^^^^^^^^^^^^^^^^^ attributes hash: 18270091135093349626
   │
   = ValueAttribute

note: 
  ┌─ demos/guest_book.fe:8:5
  │  
8 │ ╭     event Signed:
9 │ │         book_msg: String<100>
  │ ╰─────────────────────────────^ attributes hash: 13470010196640787383
  │  
  = EventDef {
        name: "Signed",
        topic: "0xcd5d879305a2503cad08d3e2d007778eec8dc5def7bc74dd20875842b2ff7765",
        fields: [
            (
                "book_msg",
                String(
                    FeString {
                        max_size: 100,
                    },
                ),
            ),
        ],
        indexed_fields: [],
    }

note: 
  ┌─ demos/guest_book.fe:9:19
  │
9 │         book_msg: String<100>
  │                   ^^^^^^^^^^^ attributes hash: 17803113925034335199
  │
  = String(
        FeString {
            max_size: 100,
        },
    )

note: 
   ┌─ demos/guest_book.fe:11:28
   │
11 │     pub def sign(book_msg: String<100>):
   │                            ^^^^^^^^^^^ attributes hash: 17803113925034335199
   │
   = String(
         FeString {
             max_size: 100,
         },
     )

note: 
   ┌─ demos/guest_book.fe:18:27
   │
18 │     pub def get_msg(addr: address) -> String<100>:
   │                           ^^^^^^^ attributes hash: 16931239362436195516
   │
   = Base(
         Address,
     )

note: 
   ┌─ demos/guest_book.fe:18:39
   │
18 │     pub def get_msg(addr: address) -> String<100>:
   │                                       ^^^^^^^^^^^ attributes hash: 17803113925034335199
   │
   = String(
         FeString {
             max_size: 100,
         },
     )

note: 
  ┌─ demos/guest_book.fe:5:19
  │
5 │     messages: Map<address, String<100>>
  │                   ^^^^^^^ attributes hash: 16931239362436195516
  │
  = Base(
        Address,
    )

note: 
  ┌─ demos/guest_book.fe:5:28
  │
5 │     messages: Map<address, String<100>>
  │                            ^^^^^^^^^^^ attributes hash: 17803113925034335199
  │
  = String(
        FeString {
            max_size: 100,
        },
    )

note: 
  ┌─ demos/guest_book.fe:5:15
  │
5 │     messages: Map<address, String<100>>
  │               ^^^^^^^^^^^^^^^^^^^^^^^^^ attributes hash: 12432616856521389637
  │
  = Map(
        Map {
            key: Address,
            value: String(
                FeString {
                    max_size: 100,
                },
            ),
        },
    )


