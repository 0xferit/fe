---
source: crates/analyzer/tests/analysis.rs
expression: "build_snapshot(&files, module, &db)"

---
note: 
  ┌─ stress/tuple_stress.fe:2:5
  │
2 │     my_sto_tuple: (u256, i32)
  │     ^^^^^^^^^^^^^^^^^^^^^^^^^ (u256, i32)

note: 
  ┌─ stress/tuple_stress.fe:5:9
  │
5 │         my_tuple: (u256, bool, address)
  │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (u256, bool, address)

note: 
   ┌─ stress/tuple_stress.fe:7:5
   │  
 7 │ ╭     pub fn build_my_tuple(
 8 │ │         my_num: u256,
 9 │ │         my_bool: bool,
10 │ │         my_address: address
11 │ │     ) -> (u256, bool, address):
12 │ │         return (my_num, my_bool, my_address)
   │ ╰────────────────────────────────────────────^ attributes hash: 13483717293020073668
   │  
   = FunctionSignature {
         self_decl: None,
         params: [
             FunctionParam {
                 name: "my_num",
                 typ: Ok(
                     Base(
                         Numeric(
                             U256,
                         ),
                     ),
                 ),
             },
             FunctionParam {
                 name: "my_bool",
                 typ: Ok(
                     Base(
                         Bool,
                     ),
                 ),
             },
             FunctionParam {
                 name: "my_address",
                 typ: Ok(
                     Base(
                         Address,
                     ),
                 ),
             },
         ],
         return_type: Ok(
             Tuple(
                 Tuple {
                     items: [
                         Base(
                             Numeric(
                                 U256,
                             ),
                         ),
                         Base(
                             Bool,
                         ),
                         Base(
                             Address,
                         ),
                     ],
                 },
             ),
         ),
     }

note: 
   ┌─ stress/tuple_stress.fe:12:17
   │
12 │         return (my_num, my_bool, my_address)
   │                 ^^^^^^  ^^^^^^^  ^^^^^^^^^^ address: Value
   │                 │       │         
   │                 │       bool: Value
   │                 u256: Value

note: 
   ┌─ stress/tuple_stress.fe:12:16
   │
12 │         return (my_num, my_bool, my_address)
   │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (u256, bool, address): Memory

note: 
   ┌─ stress/tuple_stress.fe:14:5
   │  
14 │ ╭     pub fn read_my_tuple_item0(my_tuple: (u256, bool, address)) -> u256:
15 │ │         return my_tuple.item0
   │ ╰─────────────────────────────^ attributes hash: 2766506595472512026
   │  
   = FunctionSignature {
         self_decl: None,
         params: [
             FunctionParam {
                 name: "my_tuple",
                 typ: Ok(
                     Tuple(
                         Tuple {
                             items: [
                                 Base(
                                     Numeric(
                                         U256,
                                     ),
                                 ),
                                 Base(
                                     Bool,
                                 ),
                                 Base(
                                     Address,
                                 ),
                             ],
                         },
                     ),
                 ),
             },
         ],
         return_type: Ok(
             Base(
                 Numeric(
                     U256,
                 ),
             ),
         ),
     }

note: 
   ┌─ stress/tuple_stress.fe:15:16
   │
15 │         return my_tuple.item0
   │                ^^^^^^^^ (u256, bool, address): Memory

note: 
   ┌─ stress/tuple_stress.fe:15:16
   │
15 │         return my_tuple.item0
   │                ^^^^^^^^^^^^^^ u256: Memory => Value

note: 
   ┌─ stress/tuple_stress.fe:17:5
   │  
17 │ ╭     pub fn read_my_tuple_item1(my_tuple: (u256, bool, address)) -> bool:
18 │ │         return my_tuple.item1
   │ ╰─────────────────────────────^ attributes hash: 6352541920629593005
   │  
   = FunctionSignature {
         self_decl: None,
         params: [
             FunctionParam {
                 name: "my_tuple",
                 typ: Ok(
                     Tuple(
                         Tuple {
                             items: [
                                 Base(
                                     Numeric(
                                         U256,
                                     ),
                                 ),
                                 Base(
                                     Bool,
                                 ),
                                 Base(
                                     Address,
                                 ),
                             ],
                         },
                     ),
                 ),
             },
         ],
         return_type: Ok(
             Base(
                 Bool,
             ),
         ),
     }

note: 
   ┌─ stress/tuple_stress.fe:18:16
   │
18 │         return my_tuple.item1
   │                ^^^^^^^^ (u256, bool, address): Memory

note: 
   ┌─ stress/tuple_stress.fe:18:16
   │
18 │         return my_tuple.item1
   │                ^^^^^^^^^^^^^^ bool: Memory => Value

note: 
   ┌─ stress/tuple_stress.fe:20:5
   │  
20 │ ╭     pub fn read_my_tuple_item2(my_tuple: (u256, bool, address)) -> address:
21 │ │         return my_tuple.item2
   │ ╰─────────────────────────────^ attributes hash: 12452259679831530463
   │  
   = FunctionSignature {
         self_decl: None,
         params: [
             FunctionParam {
                 name: "my_tuple",
                 typ: Ok(
                     Tuple(
                         Tuple {
                             items: [
                                 Base(
                                     Numeric(
                                         U256,
                                     ),
                                 ),
                                 Base(
                                     Bool,
                                 ),
                                 Base(
                                     Address,
                                 ),
                             ],
                         },
                     ),
                 ),
             },
         ],
         return_type: Ok(
             Base(
                 Address,
             ),
         ),
     }

note: 
   ┌─ stress/tuple_stress.fe:21:16
   │
21 │         return my_tuple.item2
   │                ^^^^^^^^ (u256, bool, address): Memory

note: 
   ┌─ stress/tuple_stress.fe:21:16
   │
21 │         return my_tuple.item2
   │                ^^^^^^^^^^^^^^ address: Memory => Value

note: 
   ┌─ stress/tuple_stress.fe:23:5
   │  
23 │ ╭     pub fn read_my_tuple_item10(my_tuple: (u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, address)) -> address:
24 │ │         return my_tuple.item10
   │ ╰──────────────────────────────^ attributes hash: 14267968335076845493
   │  
   = FunctionSignature {
         self_decl: None,
         params: [
             FunctionParam {
                 name: "my_tuple",
                 typ: Ok(
                     Tuple(
                         Tuple {
                             items: [
                                 Base(
                                     Numeric(
                                         U256,
                                     ),
                                 ),
                                 Base(
                                     Numeric(
                                         U256,
                                     ),
                                 ),
                                 Base(
                                     Numeric(
                                         U256,
                                     ),
                                 ),
                                 Base(
                                     Numeric(
                                         U256,
                                     ),
                                 ),
                                 Base(
                                     Numeric(
                                         U256,
                                     ),
                                 ),
                                 Base(
                                     Numeric(
                                         U256,
                                     ),
                                 ),
                                 Base(
                                     Numeric(
                                         U256,
                                     ),
                                 ),
                                 Base(
                                     Numeric(
                                         U256,
                                     ),
                                 ),
                                 Base(
                                     Numeric(
                                         U256,
                                     ),
                                 ),
                                 Base(
                                     Numeric(
                                         U256,
                                     ),
                                 ),
                                 Base(
                                     Address,
                                 ),
                             ],
                         },
                     ),
                 ),
             },
         ],
         return_type: Ok(
             Base(
                 Address,
             ),
         ),
     }

note: 
   ┌─ stress/tuple_stress.fe:24:16
   │
24 │         return my_tuple.item10
   │                ^^^^^^^^ (u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, address): Memory

note: 
   ┌─ stress/tuple_stress.fe:24:16
   │
24 │         return my_tuple.item10
   │                ^^^^^^^^^^^^^^^ address: Memory => Value

note: 
   ┌─ stress/tuple_stress.fe:26:5
   │  
26 │ ╭     pub fn emit_my_event(my_tuple: (u256, bool, address)):
27 │ │         emit MyEvent(my_tuple)
   │ ╰──────────────────────────────^ attributes hash: 11035500091824568233
   │  
   = FunctionSignature {
         self_decl: None,
         params: [
             FunctionParam {
                 name: "my_tuple",
                 typ: Ok(
                     Tuple(
                         Tuple {
                             items: [
                                 Base(
                                     Numeric(
                                         U256,
                                     ),
                                 ),
                                 Base(
                                     Bool,
                                 ),
                                 Base(
                                     Address,
                                 ),
                             ],
                         },
                     ),
                 ),
             },
         ],
         return_type: Ok(
             Base(
                 Unit,
             ),
         ),
     }

note: 
   ┌─ stress/tuple_stress.fe:27:22
   │
27 │         emit MyEvent(my_tuple)
   │                      ^^^^^^^^ (u256, bool, address): Memory

note: 
   ┌─ stress/tuple_stress.fe:27:9
   │
27 │         emit MyEvent(my_tuple)
   │         ^^^^^^^^^^^^^^^^^^^^^^ attributes hash: 12913536175581177750
   │
   = Event {
         name: "MyEvent",
         fields: [
             EventField {
                 name: "my_tuple",
                 typ: Ok(
                     Tuple(
                         Tuple {
                             items: [
                                 Base(
                                     Numeric(
                                         U256,
                                     ),
                                 ),
                                 Base(
                                     Bool,
                                 ),
                                 Base(
                                     Address,
                                 ),
                             ],
                         },
                     ),
                 ),
                 is_indexed: false,
             },
         ],
     }

note: 
   ┌─ stress/tuple_stress.fe:29:5
   │  
29 │ ╭     pub fn set_my_sto_tuple(self, my_u256: u256, my_i32: i32):
30 │ │         assert self.my_sto_tuple.item0 == u256(0) and self.my_sto_tuple.item1 == i32(0)
31 │ │         self.my_sto_tuple = (my_u256, my_i32)
   │ ╰─────────────────────────────────────────────^ attributes hash: 13883869095305465208
   │  
   = FunctionSignature {
         self_decl: Some(
             Mutable,
         ),
         params: [
             FunctionParam {
                 name: "my_u256",
                 typ: Ok(
                     Base(
                         Numeric(
                             U256,
                         ),
                     ),
                 ),
             },
             FunctionParam {
                 name: "my_i32",
                 typ: Ok(
                     Base(
                         Numeric(
                             I32,
                         ),
                     ),
                 ),
             },
         ],
         return_type: Ok(
             Base(
                 Unit,
             ),
         ),
     }

note: 
   ┌─ stress/tuple_stress.fe:30:16
   │
30 │         assert self.my_sto_tuple.item0 == u256(0) and self.my_sto_tuple.item1 == i32(0)
   │                ^^^^ Foo: Value

note: 
   ┌─ stress/tuple_stress.fe:30:16
   │
30 │         assert self.my_sto_tuple.item0 == u256(0) and self.my_sto_tuple.item1 == i32(0)
   │                ^^^^^^^^^^^^^^^^^ (u256, i32): Storage { nonce: Some(0) }

note: 
   ┌─ stress/tuple_stress.fe:30:16
   │
30 │         assert self.my_sto_tuple.item0 == u256(0) and self.my_sto_tuple.item1 == i32(0)
   │                ^^^^^^^^^^^^^^^^^^^^^^^         ^ u256: Value
   │                │                                
   │                u256: Storage { nonce: Some(0) } => Value

note: 
   ┌─ stress/tuple_stress.fe:30:43
   │
30 │         assert self.my_sto_tuple.item0 == u256(0) and self.my_sto_tuple.item1 == i32(0)
   │                                           ^^^^^^^ u256: Value

note: 
   ┌─ stress/tuple_stress.fe:30:16
   │
30 │         assert self.my_sto_tuple.item0 == u256(0) and self.my_sto_tuple.item1 == i32(0)
   │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^     ^^^^ Foo: Value
   │                │                                       
   │                bool: Value

note: 
   ┌─ stress/tuple_stress.fe:30:55
   │
30 │         assert self.my_sto_tuple.item0 == u256(0) and self.my_sto_tuple.item1 == i32(0)
   │                                                       ^^^^^^^^^^^^^^^^^ (u256, i32): Storage { nonce: Some(0) }

note: 
   ┌─ stress/tuple_stress.fe:30:55
   │
30 │         assert self.my_sto_tuple.item0 == u256(0) and self.my_sto_tuple.item1 == i32(0)
   │                                                       ^^^^^^^^^^^^^^^^^^^^^^^        ^ i32: Value
   │                                                       │                               
   │                                                       i32: Storage { nonce: Some(0) } => Value

note: 
   ┌─ stress/tuple_stress.fe:30:82
   │
30 │         assert self.my_sto_tuple.item0 == u256(0) and self.my_sto_tuple.item1 == i32(0)
   │                                                                                  ^^^^^^ i32: Value

note: 
   ┌─ stress/tuple_stress.fe:30:55
   │
30 │         assert self.my_sto_tuple.item0 == u256(0) and self.my_sto_tuple.item1 == i32(0)
   │                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value

note: 
   ┌─ stress/tuple_stress.fe:30:16
   │
30 │         assert self.my_sto_tuple.item0 == u256(0) and self.my_sto_tuple.item1 == i32(0)
   │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value
31 │         self.my_sto_tuple = (my_u256, my_i32)
   │         ^^^^ Foo: Value

note: 
   ┌─ stress/tuple_stress.fe:31:9
   │
31 │         self.my_sto_tuple = (my_u256, my_i32)
   │         ^^^^^^^^^^^^^^^^^    ^^^^^^^  ^^^^^^ i32: Value
   │         │                    │         
   │         │                    u256: Value
   │         (u256, i32): Storage { nonce: Some(0) }

note: 
   ┌─ stress/tuple_stress.fe:31:29
   │
31 │         self.my_sto_tuple = (my_u256, my_i32)
   │                             ^^^^^^^^^^^^^^^^^ (u256, i32): Memory

note: 
   ┌─ stress/tuple_stress.fe:30:43
   │
30 │         assert self.my_sto_tuple.item0 == u256(0) and self.my_sto_tuple.item1 == i32(0)
   │                                           ^^^^                                   ^^^ TypeConstructor(Base(Numeric(I32)))
   │                                           │                                       
   │                                           TypeConstructor(Base(Numeric(U256)))

note: 
   ┌─ stress/tuple_stress.fe:33:5
   │  
33 │ ╭     pub fn get_my_sto_tuple(self) -> (u256, i32):
34 │ │         return self.my_sto_tuple.to_mem()
   │ ╰─────────────────────────────────────────^ attributes hash: 6192946144527924451
   │  
   = FunctionSignature {
         self_decl: Some(
             Mutable,
         ),
         params: [],
         return_type: Ok(
             Tuple(
                 Tuple {
                     items: [
                         Base(
                             Numeric(
                                 U256,
                             ),
                         ),
                         Base(
                             Numeric(
                                 I32,
                             ),
                         ),
                     ],
                 },
             ),
         ),
     }

note: 
   ┌─ stress/tuple_stress.fe:34:16
   │
34 │         return self.my_sto_tuple.to_mem()
   │                ^^^^ Foo: Value

note: 
   ┌─ stress/tuple_stress.fe:34:16
   │
34 │         return self.my_sto_tuple.to_mem()
   │                ^^^^^^^^^^^^^^^^^ (u256, i32): Storage { nonce: Some(0) }

note: 
   ┌─ stress/tuple_stress.fe:34:16
   │
34 │         return self.my_sto_tuple.to_mem()
   │                ^^^^^^^^^^^^^^^^^^^^^^^^^^ (u256, i32): Storage { nonce: Some(0) } => Memory

note: 
   ┌─ stress/tuple_stress.fe:34:16
   │
34 │         return self.my_sto_tuple.to_mem()
   │                ^^^^^^^^^^^^^^^^^^^^^^^^ BuiltinValueMethod(ToMem)

note: 
   ┌─ stress/tuple_stress.fe:36:5
   │  
36 │ ╭     pub fn build_tuple_and_emit(self):
37 │ │         let my_num: u256 = self.my_sto_tuple.item0
38 │ │         let my_tuple: (u256, bool, address) = (
39 │ │             self.my_sto_tuple.item0,
   · │
42 │ │         )
43 │ │         emit_my_event(my_tuple)
   │ ╰───────────────────────────────^ attributes hash: 17603814563784536273
   │  
   = FunctionSignature {
         self_decl: Some(
             Mutable,
         ),
         params: [],
         return_type: Ok(
             Base(
                 Unit,
             ),
         ),
     }

note: 
   ┌─ stress/tuple_stress.fe:37:21
   │
37 │         let my_num: u256 = self.my_sto_tuple.item0
   │                     ^^^^ u256
38 │         let my_tuple: (u256, bool, address) = (
   │                       ^^^^^^^^^^^^^^^^^^^^^ (u256, bool, address)

note: 
   ┌─ stress/tuple_stress.fe:37:28
   │
37 │         let my_num: u256 = self.my_sto_tuple.item0
   │                            ^^^^ Foo: Value

note: 
   ┌─ stress/tuple_stress.fe:37:28
   │
37 │         let my_num: u256 = self.my_sto_tuple.item0
   │                            ^^^^^^^^^^^^^^^^^ (u256, i32): Storage { nonce: Some(0) }

note: 
   ┌─ stress/tuple_stress.fe:37:28
   │
37 │         let my_num: u256 = self.my_sto_tuple.item0
   │                            ^^^^^^^^^^^^^^^^^^^^^^^ u256: Storage { nonce: Some(0) } => Value
38 │         let my_tuple: (u256, bool, address) = (
39 │             self.my_sto_tuple.item0,
   │             ^^^^ Foo: Value

note: 
   ┌─ stress/tuple_stress.fe:39:13
   │
39 │             self.my_sto_tuple.item0,
   │             ^^^^^^^^^^^^^^^^^ (u256, i32): Storage { nonce: Some(0) }

note: 
   ┌─ stress/tuple_stress.fe:39:13
   │
39 │             self.my_sto_tuple.item0,
   │             ^^^^^^^^^^^^^^^^^^^^^^^ u256: Storage { nonce: Some(0) } => Value
40 │             true and false,
   │             ^^^^     ^^^^^ bool: Value
   │             │         
   │             bool: Value

note: 
   ┌─ stress/tuple_stress.fe:40:13
   │
40 │             true and false,
   │             ^^^^^^^^^^^^^^ bool: Value
41 │             address(26)
   │                     ^^ u256: Value

note: 
   ┌─ stress/tuple_stress.fe:41:13
   │
41 │             address(26)
   │             ^^^^^^^^^^^ address: Value

note: 
   ┌─ stress/tuple_stress.fe:38:47
   │  
38 │           let my_tuple: (u256, bool, address) = (
   │ ╭───────────────────────────────────────────────^
39 │ │             self.my_sto_tuple.item0,
40 │ │             true and false,
41 │ │             address(26)
42 │ │         )
   │ ╰─────────^ (u256, bool, address): Memory
43 │           emit_my_event(my_tuple)
   │                         ^^^^^^^^ (u256, bool, address): Memory

note: 
   ┌─ stress/tuple_stress.fe:43:9
   │
43 │         emit_my_event(my_tuple)
   │         ^^^^^^^^^^^^^^^^^^^^^^^ (): Value

note: 
   ┌─ stress/tuple_stress.fe:41:13
   │
41 │             address(26)
   │             ^^^^^^^ TypeConstructor(Base(Address))
42 │         )
43 │         emit_my_event(my_tuple)
   │         ^^^^^^^^^^^^^ Pure(FunctionId(5))

note: 
   ┌─ stress/tuple_stress.fe:45:5
   │  
45 │ ╭     pub fn encode_my_tuple(my_tuple: (u256, bool, address)) -> Array<u8, 96>:
46 │ │         return my_tuple.abi_encode()
   │ ╰────────────────────────────────────^ attributes hash: 4037443094215636083
   │  
   = FunctionSignature {
         self_decl: None,
         params: [
             FunctionParam {
                 name: "my_tuple",
                 typ: Ok(
                     Tuple(
                         Tuple {
                             items: [
                                 Base(
                                     Numeric(
                                         U256,
                                     ),
                                 ),
                                 Base(
                                     Bool,
                                 ),
                                 Base(
                                     Address,
                                 ),
                             ],
                         },
                     ),
                 ),
             },
         ],
         return_type: Ok(
             Array(
                 Array {
                     size: 96,
                     inner: Numeric(
                         U8,
                     ),
                 },
             ),
         ),
     }

note: 
   ┌─ stress/tuple_stress.fe:46:16
   │
46 │         return my_tuple.abi_encode()
   │                ^^^^^^^^ (u256, bool, address): Memory

note: 
   ┌─ stress/tuple_stress.fe:46:16
   │
46 │         return my_tuple.abi_encode()
   │                ^^^^^^^^^^^^^^^^^^^^^ Array<u8, 96>: Memory

note: 
   ┌─ stress/tuple_stress.fe:46:16
   │
46 │         return my_tuple.abi_encode()
   │                ^^^^^^^^^^^^^^^^^^^ BuiltinValueMethod(AbiEncode)


