---
source: crates/yulgen/tests/yulgen.rs
expression: "yul::Block{statements:\n               abi_functions::decode_functions(&[AbiType::Bool,\n                                                 AbiType::Address],\n                                               AbiDecodeLocation::Memory),}"

---
{
    function abi_decode_component_address_mem(head_start, offset) -> return_val {
        let ptr := add(head_start, offset)
        return_val := mload(ptr)
        if iszero(is_left_padded(96, return_val)) { revert_with_Error_uint256(259) }
    }
    function abi_decode_component_bool_mem(head_start, offset) -> return_val {
        let ptr := add(head_start, offset)
        return_val := mload(ptr)
        if iszero(is_left_padded(255, return_val)) { revert_with_Error_uint256(259) }
    }
    function abi_decode_data_bool_address_mem(head_start, data_end) -> return_val_0, return_val_1 {
        let encoding_size := sub(data_end, head_start)
        if iszero(eq(encoding_size, 64)) { revert_with_Error_uint256(259) }
        let head_offset_0 := 0
        let head_offset_1 := 32
        let decoded_val_0 := abi_decode_component_bool_mem(head_start, head_offset_0)
        let decoded_val_1 := abi_decode_component_address_mem(head_start, head_offset_1)
        if iszero(eq(encoding_size, 64)) { revert_with_Error_uint256(259) }
        return_val_0 := decoded_val_0
        return_val_1 := decoded_val_1
    }
}
