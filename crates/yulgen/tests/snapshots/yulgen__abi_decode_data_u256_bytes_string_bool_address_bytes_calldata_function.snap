---
source: crates/yulgen/tests/yulgen.rs
expression: "yul::Block{statements:\n               abi_functions::decode_functions(&[AbiType::Uint{size: 32,},\n                                                 AbiType::Bytes{size: 100,},\n                                                 AbiType::String{max_size:\n                                                                     42,},\n                                                 AbiType::Bool,\n                                                 AbiType::Address,\n                                                 AbiType::Bytes{size: 100,}],\n                                               AbiDecodeLocation::Calldata),}"

---
{
    function abi_decode_component_address_calldata(head_start, offset) -> return_val {
        let ptr := add(head_start, offset)
        return_val := calldataload(ptr)
        if iszero(is_left_padded(96, return_val)) { revert_with_Error_uint256(259) }
    }
    function abi_decode_component_bool_calldata(head_start, offset) -> return_val {
        let ptr := add(head_start, offset)
        return_val := calldataload(ptr)
        if iszero(is_left_padded(255, return_val)) { revert_with_Error_uint256(259) }
    }
    function abi_decode_component_bytes_100_calldata(head_start, head_offset) -> return_val, data_start_offset, data_end_offset {
        let head_ptr := add(head_start, head_offset)
        data_start_offset := calldataload(head_ptr)
        let data_start := add(head_start, data_start_offset)
        let bytes_size := calldataload(data_start)
        if iszero(eq(bytes_size, 100)) { revert_with_Error_uint256(259) }
        let data_size := add(bytes_size, 32)
        let padded_data_size := ceil32(data_size)
        data_end_offset := add(data_start_offset, padded_data_size)
        let end_word := calldataload(sub(add(head_start, data_end_offset), 32))
        let padding_size_bits := mul(sub(padded_data_size, data_size), 8)
        if iszero(is_right_padded(padding_size_bits, end_word)) { revert_with_Error_uint256(259) }
        return_val := ccopym(add(data_start, 32), sub(data_size, 32))
    }
    function abi_decode_component_string_42_calldata(head_start, head_offset) -> return_val, data_start_offset, data_end_offset {
        let head_ptr := add(head_start, head_offset)
        data_start_offset := calldataload(head_ptr)
        let data_start := add(head_start, data_start_offset)
        let string_size := calldataload(data_start)
        if gt(string_size, 42) { revert_with_Error_uint256(259) }
        let data_size := add(string_size, 32)
        let padded_data_size := ceil32(data_size)
        data_end_offset := add(data_start_offset, padded_data_size)
        let end_word := calldataload(sub(add(head_start, data_end_offset), 32))
        let padding_size_bits := mul(sub(padded_data_size, data_size), 8)
        if iszero(is_right_padded(padding_size_bits, end_word)) { revert_with_Error_uint256(259) }
        return_val := ccopym(data_start, data_size)
    }
    function abi_decode_component_uint256_calldata(head_start, offset) -> return_val {
        let ptr := add(head_start, offset)
        return_val := calldataload(ptr)
        if iszero(is_left_padded(0, return_val)) { revert_with_Error_uint256(259) }
    }
    function abi_decode_data_uint256_bytes_100_string_42_bool_address_bytes_100_calldata(head_start, data_end) -> return_val_0, return_val_1, return_val_2, return_val_3, return_val_4, return_val_5 {
        let encoding_size := sub(data_end, head_start)
        if or(lt(encoding_size, 544), gt(encoding_size, 608)) { revert_with_Error_uint256(259) }
        let head_offset_0 := 0
        let head_offset_1 := 32
        let head_offset_2 := 64
        let head_offset_3 := 96
        let head_offset_4 := 128
        let head_offset_5 := 160
        let decoded_val_0 := abi_decode_component_uint256_calldata(head_start, head_offset_0)
        let decoded_val_1, data_start_offset_1, data_end_offset_1 := abi_decode_component_bytes_100_calldata(head_start, head_offset_1)
        let decoded_val_2, data_start_offset_2, data_end_offset_2 := abi_decode_component_string_42_calldata(head_start, head_offset_2)
        let decoded_val_3 := abi_decode_component_bool_calldata(head_start, head_offset_3)
        let decoded_val_4 := abi_decode_component_address_calldata(head_start, head_offset_4)
        let decoded_val_5, data_start_offset_5, data_end_offset_5 := abi_decode_component_bytes_100_calldata(head_start, head_offset_5)
        if iszero(eq(data_start_offset_1, 192)) { revert_with_Error_uint256(259) }
        if iszero(eq(data_start_offset_2, data_end_offset_1)) { revert_with_Error_uint256(259) }
        if iszero(eq(data_start_offset_5, data_end_offset_2)) { revert_with_Error_uint256(259) }
        if iszero(eq(encoding_size, data_end_offset_5)) { revert_with_Error_uint256(259) }
        return_val_0 := decoded_val_0
        return_val_1 := decoded_val_1
        return_val_2 := decoded_val_2
        return_val_3 := decoded_val_3
        return_val_4 := decoded_val_4
        return_val_5 := decoded_val_5
    }
}
